/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import error.ErrorTable;
import scanner.Scanner;
import scanner.Token;
import error.Error;
import java.awt.Color;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import static javafx.scene.paint.Color.color;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import parser.BSQParser;
import parser.LTSParser;
import sopa.Busqueda;
import sopa.ExportCode;
import sopa.Matriz;
import sopa.Search;
import sopa.Sopa;
//import parser.Parser;

/**
 *
 * @author josue
 */
public class SopaSearch extends javax.swing.JFrame {

    /**
     * Creates new form FrontEnd
     */
    public Matriz matriz;

    public SopaSearch() {

        initComponents();
        code.setDocument(doc);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contentPane = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        code = new javax.swing.JTextPane();
        searchFast = new javax.swing.JTextField();
        searchFastB = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        openBSQ = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tetris Editor");
        setName("content"); // NOI18N

        jScrollPane2.setViewportView(code);

        javax.swing.GroupLayout contentPaneLayout = new javax.swing.GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 752, Short.MAX_VALUE)
                .addContainerGap())
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                .addContainerGap())
        );

        searchFastB.setText("Busqueda rápida");
        searchFastB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFastBActionPerformed(evt);
            }
        });

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Abrir archivo LTS");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        openBSQ.setText("Abrir archivo BSQ");
        openBSQ.setEnabled(false);
        openBSQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBSQActionPerformed(evt);
            }
        });
        jMenu1.add(openBSQ);

        jMenuItem2.setText("Guardar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Guardar como...");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Salir");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Codigo");

        jMenuItem5.setText("Analizar");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem9.setText("Errores");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);

        jMenuItem10.setText("Tabla de tokens");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem10);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Ejecutar");

        jMenuItem11.setText("Iniciar");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem11);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Ayuda");

        jMenuItem6.setText("Manual de usuario");
        jMenu4.add(jMenuItem6);

        jMenuItem7.setText("Manual técnico");
        jMenu4.add(jMenuItem7);

        jMenuItem8.setText("Acerca de...");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem8);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(contentPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(searchFast, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(searchFastB)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(9, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchFast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchFastB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(contentPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        OpenFileLTS();
        LTSParser ltsParser = new LTSParser(ltsScanner.TokenTable);
        if (ltsParser.ErrorTable.size() == 0 && ltsScanner.ErrorTable.size() == 0) {
            openBSQ.setEnabled(true);
            showMessageDialog(null, "Archivo correcto!");
            for (int i = 0; i < ltsParser.matriz.row; i++) {
                for (int j = 0; j < ltsParser.matriz.column; j++) {
                    System.out.println("i " + i + ", j " + j + ":" + ltsParser.matriz.sopa[i][j].getText());
                }
            }
            Sopa sopa = new Sopa(ltsParser.matriz.row, ltsParser.matriz.column, ltsParser.matriz.sopa);
            this.matriz = ltsParser.matriz;

            sopa.setVisible(true);
        } else {
            openBSQ.setEnabled(false);
            showMessageDialog(null, "El archivo contiene errores");
            new ErrorTable(ltsScanner.ErrorTable).setVisible(true);
            new ErrorTable(ltsParser.ErrorTable).setVisible(true);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        SaveFile();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        SaveFileAs();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    public StyleContext sc = new StyleContext();
    public DefaultStyledDocument doc = new DefaultStyledDocument(sc);
    public Scanner scanner = new Scanner();
    public Scanner ltsScanner = new Scanner();

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed

        scanner.SetCode(code.getText());
        scanner.Scan();
        formatCode();
        if (scanner.ErrorTable != null) {
            if (scanner.ErrorTable.size() != 0) {
                new ErrorTable(scanner.ErrorTable).setVisible(true);
            }
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        if (scanner.ErrorTable != null) {
            if (scanner.ErrorTable.size() != 0) {
                new ErrorTable(scanner.ErrorTable).setVisible(true);
            } else {
                showMessageDialog(null, "No existen errores...");
            }
        } else {
            showMessageDialog(null, "No se ha compilado el código");
        }
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        if (scanner.TokenTable != null) {
            if (scanner.TokenTable.size() != 0) {
                new TokenTable(scanner.TokenTable).setVisible(true);
            } else {
                showMessageDialog(null, "La tabla de tokens esta vacía...");
            }
        } else {
            showMessageDialog(null, "No se ha compilado el código");
        }
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        showMessageDialog(null, "Nombre: Josué Benjamín Girón Ramírez\nCarné: 201318631\nLENGUAJES FORMALES Y DE PROGRAMACION\nVacaiones de Diciembre 2018");
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        scanner.SetCode(code.getText());
        scanner.Scan();
        formatCode();
        if (scanner.TokenTable.size() == 0) {
            showMessageDialog(null, "La tabla de tokens esta vacía...");
        } else if (scanner.ErrorTable.size() > 0) {
            new ErrorTable(scanner.ErrorTable).setVisible(true);
        } else {
            BSQParser parser = new BSQParser(scanner.TokenTable, this.matriz);
        }

    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void openBSQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBSQActionPerformed
        OpenFileBSQ();
        scanner.SetCode(code.getText());
        scanner.Scan();
        formatCode();
        if (scanner.TokenTable.size() == 0) {
            showMessageDialog(null, "La tabla de tokens esta vacía...");
        } else if (scanner.ErrorTable.size() > 0) {
            new ErrorTable(scanner.ErrorTable).setVisible(true);
        } else {
            // BSQParser parser = new BSQParser(scanner.TokenTable, this.matriz);
        }
    }//GEN-LAST:event_openBSQActionPerformed

    private void searchFastBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFastBActionPerformed
        String word = searchFast.getText();
        Search search = new Search(this.matriz);
        Busqueda myBusqueda = search.fastSearch(word);
        if (myBusqueda.searchType != 0) {
            System.out.println("Hola, ya lo encontré!");
            myBusqueda.paintWord();
            ExportCode export = new ExportCode();
            String hola = "BUSQUEDA busquedaSimple1 {\n"
                    + "PALABRA:= ”" + myBusqueda.word + "”;\n"
                    + "COLUMNA := " + myBusqueda.column + ";\n"
                    + "FILA := " + myBusqueda.row + ";\n"
                    + "ORDEN_BUSQUEDA := " + getOrden(myBusqueda.searchType) + ";\n"
                    + "COLOR_TEXTO := " + myBusqueda.fontColor + ";\n"
                    + "FONDO_CASILLA := " + myBusqueda.backColor + "; \n}";
            export.setTextToCode(hola);

            export.setVisible(true);
            export.setEnabled(true);
            export.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        }else{
             showMessageDialog(null, "No se encontró la palabra, en la busqueda simple.");
        }

//          
//      export.pack();
//      export.setLocationRelativeTo(null);
    }//GEN-LAST:event_searchFastBActionPerformed

    private String getOrden(int searchType){
        switch(searchType){
            case 1:
                return "HORIZONTAL_IZQUIERDA";
                case 2:
                    return "HORIZONTAL_DERECHA";
                case 3:
                    return "VERTICAL_ARRIBA";
                case 4:
                    return "VERTICAL_ABAJO";
        }
        return null;
    }
    public void formatCode() {
        Style blue = sc.addStyle("ConstantWidth", null);
        StyleConstants.setForeground(blue, Color.blue);

        Style yellow = sc.addStyle("ConstantWidth", null);
        StyleConstants.setForeground(yellow, Color.yellow);

        Style orange = sc.addStyle("ConstantWidth", null);
        StyleConstants.setForeground(orange, Color.orange);

        Style green = sc.addStyle("ConstantWidth", null);
        StyleConstants.setForeground(green, Color.green);

        Style pink = sc.addStyle("ConstantWidth", null);
        StyleConstants.setForeground(pink, Color.pink);

        Style magenta = sc.addStyle("ConstantWidth", null);
        StyleConstants.setForeground(magenta, Color.magenta);

        Style cyan = sc.addStyle("ConstantWidth", null);
        StyleConstants.setForeground(cyan, Color.cyan);

        Style red = sc.addStyle("ConstantWidth", null);
        StyleConstants.setForeground(red, Color.red);

        Style err = sc.addStyle("ConstantWidth", null);
        StyleConstants.setForeground(err, Color.red);
        StyleConstants.setUnderline(err, true);
        StyleConstants.setItalic(err, true);

        for (Token token : scanner.TokenTable) {
            if (token.Type == 1) {
                doc.setCharacterAttributes(token.Offset, token.Length(), blue, true);
            } else if (token.Type == 2) {
                doc.setCharacterAttributes(token.Offset, token.Length(), yellow, true);
            } else if (token.Type == 3) {
                doc.setCharacterAttributes(token.Offset, token.Length(), red, true);
            } else if (token.Type == 4) {
                doc.setCharacterAttributes(token.Offset, token.Length(), green, true);
            } else if (token.Type == 5) {
                doc.setCharacterAttributes(token.Offset, token.Length(), pink, true);
            } else if (token.Type == 7) {
                doc.setCharacterAttributes(token.Offset, token.Length(), orange, true);
            } else if (token.Type == 8) {
                doc.setCharacterAttributes(token.Offset, token.Length(), cyan, true);
            } else if (token.Type == 10) {
                doc.setCharacterAttributes(token.Offset, token.Length(), magenta, true);
            }
        }
        for (Error error : scanner.ErrorTable) {
            doc.setCharacterAttributes(error.Offset, error.Length(), err, true);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SopaSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SopaSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SopaSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SopaSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SopaSearch().setVisible(true);
            }
        });
    }

    public void OpenFileBSQ() {
        //Creamos el objeto JFileChooser
        JFileChooser fc = new JFileChooser();

//Indicamos lo que podemos seleccionar
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

//Creamos el filtro
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.BSQ", "bsq");

//Le indicamos el filtro
        fc.setFileFilter(filtro);

//Abrimos la ventana, guardamos la opcion seleccionada por el usuario
        int seleccion = fc.showOpenDialog(contentPane);

//Si el usuario, pincha en aceptar
        if (seleccion == JFileChooser.APPROVE_OPTION) {

            //Seleccionamos el fichero
            fileCode = fc.getSelectedFile();

            //Ecribe la ruta del fichero seleccionado en el campo de texto
            code.setText(fileCode.getAbsolutePath());

            try ( FileReader fr = new FileReader(fileCode)) {
                String cadena = "";
                int valor = fr.read();
                while (valor != -1) {
                    if (valor != 13) {
                        cadena = cadena + (char) valor;
                    }
                    valor = fr.read();

                }
                code.setText(cadena);
                scanner.SetCode(cadena);
                scanner.Scan();
                formatCode();

            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }
    }

    private void SaveFile() {
        if (fileCode != null) {
            WriteCodeInFile();
        } else {
            SaveFileAs();
        }
    }

    private void SaveFileAs() {
        //Creamos el objeto JFileChooser
        JFileChooser fc = new JFileChooser();

        FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.TRS", "trs");

//Le indicamos el filtro
        fc.setFileFilter(filtro);

//Abrimos la ventana, guardamos la opcion seleccionada por el usuario
        int seleccion = fc.showSaveDialog(contentPane);

//Si el usuario, pincha en aceptar
        if (seleccion == JFileChooser.APPROVE_OPTION) {

            //Seleccionamos el fichero
            fileCode = fc.getSelectedFile();

            WriteCodeInFile();

        }
    }

    private void WriteCodeInFile() {
        try ( FileWriter fw = new FileWriter(fileCode)) {

            //Escribimos el texto en el fichero
            fw.write(code.getText());

        } catch (IOException e1) {
            e1.printStackTrace();
        }
    }

    private boolean OpenFileLTS() {
        //Creamos el objeto JFileChooser
        JFileChooser fc = new JFileChooser();

//Indicamos lo que podemos seleccionar
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

//Creamos el filtro
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.LST", "lst");

//Le indicamos el filtro
        fc.setFileFilter(filtro);

//Abrimos la ventana, guardamos la opcion seleccionada por el usuario
        int seleccion = fc.showOpenDialog(contentPane);

//Si el usuario, pincha en aceptar
        if (seleccion == JFileChooser.APPROVE_OPTION) {

            //Seleccionamos el fichero
            fileCode = fc.getSelectedFile();

            //Ecribe la ruta del fichero seleccionado en el campo de texto
            //code.setText(fileCode.getAbsolutePath());
            try ( FileReader fr = new FileReader(fileCode)) {
                String cadena = "";
                int valor = fr.read();
                while (valor != -1) {
                    if (valor != 13) {
                        cadena = cadena + (char) valor;
                    }
                    valor = fr.read();

                }
                ltsScanner.SetCode(cadena);
                ltsScanner.Scan();
                if (ltsScanner.ErrorTable.size() == 0) {
                    return true;
                } else {
                    return false;
                }

            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }
        return false;
    }

    private File fileCode;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane code;
    private javax.swing.JPanel contentPane;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem openBSQ;
    private javax.swing.JTextField searchFast;
    private javax.swing.JButton searchFastB;
    // End of variables declaration//GEN-END:variables
}
